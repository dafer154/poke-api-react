{"version":3,"sources":["components/Pokemon.js","components/Search.js","actions/pokeActions.js","actions/types.js","components/PokeCard.js","components/PokemonContainer.js","reducers/pokeReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","Component","Search","onChange","e","text","target","value","props","searchPokemon","onSubmit","preventDefault","className","id","this","type","name","placeholder","connect","state","pokemones","textSearch","dispatch","axios","get","then","resp","payload","data","results","catch","err","console","log","PokeCard","url","pokemon","src","replace","urlImagePokemon","alt","to","PokemonContainer","fetchPokemones","map","key","initialState","pokeReducer","action","statePokemones","filteredPokemones","filter","toLowerCase","indexOf","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.784a7e5b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Pokemon extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                waaaaa\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokemon\r\n\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {searchPokemon} from '../actions/pokeActions';\r\n\r\nexport class Search extends Component {\r\n    onChange = e =>{\r\n        const text = e.target.value;\r\n        this.props.searchPokemon(text);\r\n    }\r\n\r\n    onSubmit = e =>{\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid mt-5 text-center\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-4 mb-3\">\r\n                        <i className=\"fa fa-search\" /> Search Pokemon\r\n          </h1>\r\n                    <form id=\"searchForm\" onSubmit={this.onSubmit}>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"searchText\"\r\n                            placeholder=\"Search Movies, TV Series ...\"\r\n                            onChange={this.onChange}\r\n                        />\r\n                        <button type=\"submit\" className=\"btn btn-primary btn-bg mt-3\">\r\n                            Search\r\n            </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    text: state.pokemones.textSearch\r\n})\r\n\r\nexport default connect(mapStateToProps, {searchPokemon})(Search);\r\n","import { SEARCH_POKEMON, FETCH_POKEMON, FETCH_POKEMONES } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const searchPokemon = text => dispatch =>{\r\n    const url = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=806';\r\n    \r\n    axios.get(`${url}`)\r\n        .then(resp => {\r\n            dispatch({\r\n                type: SEARCH_POKEMON,\r\n                text: text,\r\n                payload: resp.data.results\r\n            })\r\n        }).catch(err => console.log(err))\r\n}\r\n\r\nexport const fetchPokemones = () => dispatch =>{\r\n    const url = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=806';\r\n\r\n    axios.get(`${url}`)\r\n        .then(resp => {\r\n            dispatch({\r\n                type: FETCH_POKEMONES,\r\n                payload: resp.data.results\r\n            })\r\n        }).catch(err => console.log(err))\r\n}\r\n\r\nexport const fetchPokemon = id => dispatch =>{\r\n    const url = 'https://pokeapi.co/api/v2/pokemon';\r\n\r\n    axios.get(`${url}/${id}`)\r\n        .then(resp => {\r\n            console.log(\"test\", resp);\r\n            dispatch({\r\n                type: FETCH_POKEMON,\r\n                payload: resp\r\n            })\r\n        }).catch(err => console.log(err))\r\n}","export const SEARCH_POKEMON = 'SEARCH_POKEMON';\r\nexport const FETCH_POKEMONES = 'FETCH_POKEMONES';\r\nexport const FETCH_POKEMON = 'FETCH_POKEMON';","import React from 'react'\r\nimport './styles/PokeCard.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst PokeCard = ({pokemon}) => {\r\n\r\n\r\n    const urlImagePokemon = url =>{\r\n        let urlImagePokemon = 'https://pokeres.bastionbot.org/images/pokemon/'\r\n        let deleteURL = url.replace('https://pokeapi.co/api/v2/pokemon/', '');\r\n        let id = deleteURL.replace('/','');\r\n        return `${urlImagePokemon}${id}.png`;\r\n    }\r\n\r\n    const idpokemon = url =>{\r\n        let deleteURL = url.replace('https://pokeapi.co/api/v2/pokemon/', '');\r\n        let id = deleteURL.replace('/','');\r\n        return id\r\n    }\r\n\r\n    return (\r\n        <div className=\"pokeCard\">\r\n            <p>{pokemon.name}</p>\r\n            <div className=\"wrap-image\">\r\n              <img className=\"sizeImage\" src={urlImagePokemon(pokemon.url)} alt=\"pokemon Cover\" />  \r\n            </div>\r\n            <Link className=\"btn btn-primary\" to={`/pokemon/${idpokemon(pokemon.url)}`}>\r\n                    Pokemon Details\r\n            <i className=\"fas fa-chevron-right\" />\r\n                </Link>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokeCard\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {fetchPokemones} from '../actions/pokeActions';\r\nimport PokeCard from '../components/PokeCard';\r\nimport './styles/PokemonContainer.css';\r\n\r\nexport class PokemonContainer extends Component {\r\n    \r\n    componentDidMount(){\r\n        this.props.fetchPokemones();\r\n    }\r\n\r\n    \r\n    render() {\r\n\r\n        const {pokemones} = this.props\r\n\r\n        console.log('pokemones', pokemones)\r\n\r\n        return (\r\n            <div className='pokedex'>\r\n                {pokemones.map(pokemon =>{\r\n                    return <PokeCard pokemon={pokemon} key={pokemon.name}/>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    pokemones: state.pokemones.pokemones\r\n})\r\n\r\nexport default connect(mapStateToProps, {fetchPokemones})(PokemonContainer)\r\n","import { SEARCH_POKEMON, FETCH_POKEMON, FETCH_POKEMONES } from '../actions/types';\r\n\r\nconst initialState = {\r\n    textSearch: '',\r\n    pokemones: [],\r\n    pokemon: {}\r\n}\r\n\r\nconst pokeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEARCH_POKEMON:\r\n            const statePokemones = action.payload;\r\n            const filteredPokemones = statePokemones.filter(pokemon => {\r\n                return pokemon.name.toLowerCase().indexOf(action.text.toLowerCase()) !== -1;\r\n              });\r\n            return {\r\n                ...state,\r\n                textSearch: action.text,\r\n                pokemones: filteredPokemones\r\n            }\r\n        case FETCH_POKEMONES:\r\n            return {\r\n                ...state,\r\n                pokemones: action.payload\r\n            }\r\n        case FETCH_POKEMON:\r\n            return {\r\n                ...state,\r\n                pokemon: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default pokeReducer","import {combineReducers} from 'redux';\r\nimport pokeReducer from './pokeReducer';\r\n\r\nexport default combineReducers({\r\n    pokemones: pokeReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\nimport rootReducer from './reducers/index';\r\n\r\nconst middleware = [thunk];\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react'\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Pokemon from './components/Pokemon';\nimport Search from './components/Search';\nimport PokemonContainer from './components/PokemonContainer';\nimport store from './store';\n\nexport class App extends Component {\n  render() {\n    return (<Provider store={store}>\n      <Router>\n        <div>\n          <Search />\n          <PokemonContainer />\n          <Route exact path=\"/pokemon/:id\" component={Pokemon} />\n        </div>\n      </Router>\n    </Provider>\n\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}